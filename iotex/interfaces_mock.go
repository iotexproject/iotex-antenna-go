// Code generated by MockGen. DO NOT EDIT.
// Source: iotex/interfaces.go

// Package iotex is a generated GoMock package.
package iotex

import (
	context "context"
	abi "github.com/ethereum/go-ethereum/accounts/abi"
	gomock "github.com/golang/mock/gomock"
	hash "github.com/iotexproject/go-pkgs/hash"
	address "github.com/iotexproject/iotex-address/address"
	account "github.com/iotexproject/iotex-antenna-go/v2/account"
	iotexapi "github.com/iotexproject/iotex-proto/golang/iotexapi"
	grpc "google.golang.org/grpc"
	big "math/big"
	reflect "reflect"
)

// MockSendActionCaller is a mock of SendActionCaller interface
type MockSendActionCaller struct {
	ctrl     *gomock.Controller
	recorder *MockSendActionCallerMockRecorder
}

// MockSendActionCallerMockRecorder is the mock recorder for MockSendActionCaller
type MockSendActionCallerMockRecorder struct {
	mock *MockSendActionCaller
}

// NewMockSendActionCaller creates a new mock instance
func NewMockSendActionCaller(ctrl *gomock.Controller) *MockSendActionCaller {
	mock := &MockSendActionCaller{ctrl: ctrl}
	mock.recorder = &MockSendActionCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendActionCaller) EXPECT() *MockSendActionCallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockSendActionCaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockSendActionCallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockSendActionCaller)(nil).API))
}

// Call mocks base method
func (m *MockSendActionCaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockSendActionCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSendActionCaller)(nil).Call), varargs...)
}

// MockTransferCaller is a mock of TransferCaller interface
type MockTransferCaller struct {
	ctrl     *gomock.Controller
	recorder *MockTransferCallerMockRecorder
}

// MockTransferCallerMockRecorder is the mock recorder for MockTransferCaller
type MockTransferCallerMockRecorder struct {
	mock *MockTransferCaller
}

// NewMockTransferCaller creates a new mock instance
func NewMockTransferCaller(ctrl *gomock.Controller) *MockTransferCaller {
	mock := &MockTransferCaller{ctrl: ctrl}
	mock.recorder = &MockTransferCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransferCaller) EXPECT() *MockTransferCallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockTransferCaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockTransferCallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockTransferCaller)(nil).API))
}

// Call mocks base method
func (m *MockTransferCaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockTransferCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockTransferCaller)(nil).Call), varargs...)
}

// SetGasPrice mocks base method
func (m *MockTransferCaller) SetGasPrice(arg0 *big.Int) TransferCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasPrice", arg0)
	ret0, _ := ret[0].(TransferCaller)
	return ret0
}

// SetGasPrice indicates an expected call of SetGasPrice
func (mr *MockTransferCallerMockRecorder) SetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasPrice", reflect.TypeOf((*MockTransferCaller)(nil).SetGasPrice), arg0)
}

// SetGasLimit mocks base method
func (m *MockTransferCaller) SetGasLimit(arg0 uint64) TransferCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasLimit", arg0)
	ret0, _ := ret[0].(TransferCaller)
	return ret0
}

// SetGasLimit indicates an expected call of SetGasLimit
func (mr *MockTransferCallerMockRecorder) SetGasLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockTransferCaller)(nil).SetGasLimit), arg0)
}

// SetPayload mocks base method
func (m *MockTransferCaller) SetPayload(arg0 []byte) TransferCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayload", arg0)
	ret0, _ := ret[0].(TransferCaller)
	return ret0
}

// SetPayload indicates an expected call of SetPayload
func (mr *MockTransferCallerMockRecorder) SetPayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockTransferCaller)(nil).SetPayload), arg0)
}

// SetNonce mocks base method
func (m *MockTransferCaller) SetNonce(arg0 uint64) TransferCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonce", arg0)
	ret0, _ := ret[0].(TransferCaller)
	return ret0
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockTransferCallerMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockTransferCaller)(nil).SetNonce), arg0)
}

// MockClaimRewardCaller is a mock of ClaimRewardCaller interface
type MockClaimRewardCaller struct {
	ctrl     *gomock.Controller
	recorder *MockClaimRewardCallerMockRecorder
}

// MockClaimRewardCallerMockRecorder is the mock recorder for MockClaimRewardCaller
type MockClaimRewardCallerMockRecorder struct {
	mock *MockClaimRewardCaller
}

// NewMockClaimRewardCaller creates a new mock instance
func NewMockClaimRewardCaller(ctrl *gomock.Controller) *MockClaimRewardCaller {
	mock := &MockClaimRewardCaller{ctrl: ctrl}
	mock.recorder = &MockClaimRewardCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClaimRewardCaller) EXPECT() *MockClaimRewardCallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockClaimRewardCaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockClaimRewardCallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockClaimRewardCaller)(nil).API))
}

// Call mocks base method
func (m *MockClaimRewardCaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockClaimRewardCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClaimRewardCaller)(nil).Call), varargs...)
}

// SetGasPrice mocks base method
func (m *MockClaimRewardCaller) SetGasPrice(arg0 *big.Int) ClaimRewardCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasPrice", arg0)
	ret0, _ := ret[0].(ClaimRewardCaller)
	return ret0
}

// SetGasPrice indicates an expected call of SetGasPrice
func (mr *MockClaimRewardCallerMockRecorder) SetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasPrice", reflect.TypeOf((*MockClaimRewardCaller)(nil).SetGasPrice), arg0)
}

// SetGasLimit mocks base method
func (m *MockClaimRewardCaller) SetGasLimit(arg0 uint64) ClaimRewardCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasLimit", arg0)
	ret0, _ := ret[0].(ClaimRewardCaller)
	return ret0
}

// SetGasLimit indicates an expected call of SetGasLimit
func (mr *MockClaimRewardCallerMockRecorder) SetGasLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockClaimRewardCaller)(nil).SetGasLimit), arg0)
}

// SetData mocks base method
func (m *MockClaimRewardCaller) SetData(arg0 []byte) ClaimRewardCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", arg0)
	ret0, _ := ret[0].(ClaimRewardCaller)
	return ret0
}

// SetData indicates an expected call of SetData
func (mr *MockClaimRewardCallerMockRecorder) SetData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockClaimRewardCaller)(nil).SetData), arg0)
}

// SetNonce mocks base method
func (m *MockClaimRewardCaller) SetNonce(arg0 uint64) ClaimRewardCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonce", arg0)
	ret0, _ := ret[0].(ClaimRewardCaller)
	return ret0
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockClaimRewardCallerMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockClaimRewardCaller)(nil).SetNonce), arg0)
}

// MockDeployContractCaller is a mock of DeployContractCaller interface
type MockDeployContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockDeployContractCallerMockRecorder
}

// MockDeployContractCallerMockRecorder is the mock recorder for MockDeployContractCaller
type MockDeployContractCallerMockRecorder struct {
	mock *MockDeployContractCaller
}

// NewMockDeployContractCaller creates a new mock instance
func NewMockDeployContractCaller(ctrl *gomock.Controller) *MockDeployContractCaller {
	mock := &MockDeployContractCaller{ctrl: ctrl}
	mock.recorder = &MockDeployContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployContractCaller) EXPECT() *MockDeployContractCallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockDeployContractCaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockDeployContractCallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockDeployContractCaller)(nil).API))
}

// Call mocks base method
func (m *MockDeployContractCaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockDeployContractCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockDeployContractCaller)(nil).Call), varargs...)
}

// SetArgs mocks base method
func (m *MockDeployContractCaller) SetArgs(abi abi.ABI, args ...interface{}) DeployContractCaller {
	m.ctrl.T.Helper()
	varargs := []interface{}{abi}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetArgs", varargs...)
	ret0, _ := ret[0].(DeployContractCaller)
	return ret0
}

// SetArgs indicates an expected call of SetArgs
func (mr *MockDeployContractCallerMockRecorder) SetArgs(abi interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{abi}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockDeployContractCaller)(nil).SetArgs), varargs...)
}

// SetGasPrice mocks base method
func (m *MockDeployContractCaller) SetGasPrice(arg0 *big.Int) DeployContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasPrice", arg0)
	ret0, _ := ret[0].(DeployContractCaller)
	return ret0
}

// SetGasPrice indicates an expected call of SetGasPrice
func (mr *MockDeployContractCallerMockRecorder) SetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasPrice", reflect.TypeOf((*MockDeployContractCaller)(nil).SetGasPrice), arg0)
}

// SetGasLimit mocks base method
func (m *MockDeployContractCaller) SetGasLimit(arg0 uint64) DeployContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasLimit", arg0)
	ret0, _ := ret[0].(DeployContractCaller)
	return ret0
}

// SetGasLimit indicates an expected call of SetGasLimit
func (mr *MockDeployContractCallerMockRecorder) SetGasLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockDeployContractCaller)(nil).SetGasLimit), arg0)
}

// SetNonce mocks base method
func (m *MockDeployContractCaller) SetNonce(arg0 uint64) DeployContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonce", arg0)
	ret0, _ := ret[0].(DeployContractCaller)
	return ret0
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockDeployContractCallerMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockDeployContractCaller)(nil).SetNonce), arg0)
}

// MockGetReceiptCaller is a mock of GetReceiptCaller interface
type MockGetReceiptCaller struct {
	ctrl     *gomock.Controller
	recorder *MockGetReceiptCallerMockRecorder
}

// MockGetReceiptCallerMockRecorder is the mock recorder for MockGetReceiptCaller
type MockGetReceiptCallerMockRecorder struct {
	mock *MockGetReceiptCaller
}

// NewMockGetReceiptCaller creates a new mock instance
func NewMockGetReceiptCaller(ctrl *gomock.Controller) *MockGetReceiptCaller {
	mock := &MockGetReceiptCaller{ctrl: ctrl}
	mock.recorder = &MockGetReceiptCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetReceiptCaller) EXPECT() *MockGetReceiptCallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockGetReceiptCaller) Call(ctx context.Context, opts ...grpc.CallOption) (*iotexapi.GetReceiptByActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*iotexapi.GetReceiptByActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockGetReceiptCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockGetReceiptCaller)(nil).Call), varargs...)
}

// MockGetLogsCaller is a mock of GetLogsCaller interface
type MockGetLogsCaller struct {
	ctrl     *gomock.Controller
	recorder *MockGetLogsCallerMockRecorder
}

// MockGetLogsCallerMockRecorder is the mock recorder for MockGetLogsCaller
type MockGetLogsCallerMockRecorder struct {
	mock *MockGetLogsCaller
}

// NewMockGetLogsCaller creates a new mock instance
func NewMockGetLogsCaller(ctrl *gomock.Controller) *MockGetLogsCaller {
	mock := &MockGetLogsCaller{ctrl: ctrl}
	mock.recorder = &MockGetLogsCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetLogsCaller) EXPECT() *MockGetLogsCallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockGetLogsCaller) Call(ctx context.Context, opts ...grpc.CallOption) (*iotexapi.GetLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*iotexapi.GetLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockGetLogsCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockGetLogsCaller)(nil).Call), varargs...)
}

// MockAuthedClient is a mock of AuthedClient interface
type MockAuthedClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthedClientMockRecorder
}

// MockAuthedClientMockRecorder is the mock recorder for MockAuthedClient
type MockAuthedClientMockRecorder struct {
	mock *MockAuthedClient
}

// NewMockAuthedClient creates a new mock instance
func NewMockAuthedClient(ctrl *gomock.Controller) *MockAuthedClient {
	mock := &MockAuthedClient{ctrl: ctrl}
	mock.recorder = &MockAuthedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthedClient) EXPECT() *MockAuthedClientMockRecorder {
	return m.recorder
}

// ReadOnlyContract mocks base method
func (m *MockAuthedClient) ReadOnlyContract(contract address.Address, abi abi.ABI) ReadOnlyContract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnlyContract", contract, abi)
	ret0, _ := ret[0].(ReadOnlyContract)
	return ret0
}

// ReadOnlyContract indicates an expected call of ReadOnlyContract
func (mr *MockAuthedClientMockRecorder) ReadOnlyContract(contract, abi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyContract", reflect.TypeOf((*MockAuthedClient)(nil).ReadOnlyContract), contract, abi)
}

// GetReceipt mocks base method
func (m *MockAuthedClient) GetReceipt(actionHash hash.Hash256) GetReceiptCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", actionHash)
	ret0, _ := ret[0].(GetReceiptCaller)
	return ret0
}

// GetReceipt indicates an expected call of GetReceipt
func (mr *MockAuthedClientMockRecorder) GetReceipt(actionHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockAuthedClient)(nil).GetReceipt), actionHash)
}

// GetLogs mocks base method
func (m *MockAuthedClient) GetLogs(request *iotexapi.GetLogsRequest) GetLogsCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", request)
	ret0, _ := ret[0].(GetLogsCaller)
	return ret0
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockAuthedClientMockRecorder) GetLogs(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAuthedClient)(nil).GetLogs), request)
}

// API mocks base method
func (m *MockAuthedClient) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockAuthedClientMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockAuthedClient)(nil).API))
}

// Contract mocks base method
func (m *MockAuthedClient) Contract(contract address.Address, abi abi.ABI) Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract", contract, abi)
	ret0, _ := ret[0].(Contract)
	return ret0
}

// Contract indicates an expected call of Contract
func (mr *MockAuthedClientMockRecorder) Contract(contract, abi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockAuthedClient)(nil).Contract), contract, abi)
}

// Transfer mocks base method
func (m *MockAuthedClient) Transfer(to address.Address, value *big.Int) TransferCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", to, value)
	ret0, _ := ret[0].(TransferCaller)
	return ret0
}

// Transfer indicates an expected call of Transfer
func (mr *MockAuthedClientMockRecorder) Transfer(to, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAuthedClient)(nil).Transfer), to, value)
}

// ClaimReward mocks base method
func (m *MockAuthedClient) ClaimReward(value *big.Int) ClaimRewardCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimReward", value)
	ret0, _ := ret[0].(ClaimRewardCaller)
	return ret0
}

// ClaimReward indicates an expected call of ClaimReward
func (mr *MockAuthedClientMockRecorder) ClaimReward(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimReward", reflect.TypeOf((*MockAuthedClient)(nil).ClaimReward), value)
}

// DeployContract mocks base method
func (m *MockAuthedClient) DeployContract(data []byte) DeployContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployContract", data)
	ret0, _ := ret[0].(DeployContractCaller)
	return ret0
}

// DeployContract indicates an expected call of DeployContract
func (mr *MockAuthedClientMockRecorder) DeployContract(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployContract", reflect.TypeOf((*MockAuthedClient)(nil).DeployContract), data)
}

// Staking mocks base method
func (m *MockAuthedClient) Staking() StakingCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Staking")
	ret0, _ := ret[0].(StakingCaller)
	return ret0
}

// Staking indicates an expected call of Staking
func (mr *MockAuthedClientMockRecorder) Staking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Staking", reflect.TypeOf((*MockAuthedClient)(nil).Staking))
}

// Candidate mocks base method
func (m *MockAuthedClient) Candidate() CandidateCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Candidate")
	ret0, _ := ret[0].(CandidateCaller)
	return ret0
}

// Candidate indicates an expected call of Candidate
func (mr *MockAuthedClientMockRecorder) Candidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candidate", reflect.TypeOf((*MockAuthedClient)(nil).Candidate))
}

// Account mocks base method
func (m *MockAuthedClient) Account() account.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(account.Account)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockAuthedClientMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAuthedClient)(nil).Account))
}

// MockReadOnlyClient is a mock of ReadOnlyClient interface
type MockReadOnlyClient struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyClientMockRecorder
}

// MockReadOnlyClientMockRecorder is the mock recorder for MockReadOnlyClient
type MockReadOnlyClientMockRecorder struct {
	mock *MockReadOnlyClient
}

// NewMockReadOnlyClient creates a new mock instance
func NewMockReadOnlyClient(ctrl *gomock.Controller) *MockReadOnlyClient {
	mock := &MockReadOnlyClient{ctrl: ctrl}
	mock.recorder = &MockReadOnlyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadOnlyClient) EXPECT() *MockReadOnlyClientMockRecorder {
	return m.recorder
}

// ReadOnlyContract mocks base method
func (m *MockReadOnlyClient) ReadOnlyContract(contract address.Address, abi abi.ABI) ReadOnlyContract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnlyContract", contract, abi)
	ret0, _ := ret[0].(ReadOnlyContract)
	return ret0
}

// ReadOnlyContract indicates an expected call of ReadOnlyContract
func (mr *MockReadOnlyClientMockRecorder) ReadOnlyContract(contract, abi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyContract", reflect.TypeOf((*MockReadOnlyClient)(nil).ReadOnlyContract), contract, abi)
}

// GetReceipt mocks base method
func (m *MockReadOnlyClient) GetReceipt(actionHash hash.Hash256) GetReceiptCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", actionHash)
	ret0, _ := ret[0].(GetReceiptCaller)
	return ret0
}

// GetReceipt indicates an expected call of GetReceipt
func (mr *MockReadOnlyClientMockRecorder) GetReceipt(actionHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockReadOnlyClient)(nil).GetReceipt), actionHash)
}

// GetLogs mocks base method
func (m *MockReadOnlyClient) GetLogs(request *iotexapi.GetLogsRequest) GetLogsCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", request)
	ret0, _ := ret[0].(GetLogsCaller)
	return ret0
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockReadOnlyClientMockRecorder) GetLogs(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockReadOnlyClient)(nil).GetLogs), request)
}

// API mocks base method
func (m *MockReadOnlyClient) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockReadOnlyClientMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockReadOnlyClient)(nil).API))
}

// MockReadContractCaller is a mock of ReadContractCaller interface
type MockReadContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockReadContractCallerMockRecorder
}

// MockReadContractCallerMockRecorder is the mock recorder for MockReadContractCaller
type MockReadContractCallerMockRecorder struct {
	mock *MockReadContractCaller
}

// NewMockReadContractCaller creates a new mock instance
func NewMockReadContractCaller(ctrl *gomock.Controller) *MockReadContractCaller {
	mock := &MockReadContractCaller{ctrl: ctrl}
	mock.recorder = &MockReadContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadContractCaller) EXPECT() *MockReadContractCallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockReadContractCaller) Call(ctx context.Context, opts ...grpc.CallOption) (Data, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockReadContractCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockReadContractCaller)(nil).Call), varargs...)
}

// MockExecuteContractCaller is a mock of ExecuteContractCaller interface
type MockExecuteContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockExecuteContractCallerMockRecorder
}

// MockExecuteContractCallerMockRecorder is the mock recorder for MockExecuteContractCaller
type MockExecuteContractCallerMockRecorder struct {
	mock *MockExecuteContractCaller
}

// NewMockExecuteContractCaller creates a new mock instance
func NewMockExecuteContractCaller(ctrl *gomock.Controller) *MockExecuteContractCaller {
	mock := &MockExecuteContractCaller{ctrl: ctrl}
	mock.recorder = &MockExecuteContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecuteContractCaller) EXPECT() *MockExecuteContractCallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockExecuteContractCaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockExecuteContractCallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockExecuteContractCaller)(nil).API))
}

// Call mocks base method
func (m *MockExecuteContractCaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockExecuteContractCallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockExecuteContractCaller)(nil).Call), varargs...)
}

// SetGasPrice mocks base method
func (m *MockExecuteContractCaller) SetGasPrice(arg0 *big.Int) ExecuteContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasPrice", arg0)
	ret0, _ := ret[0].(ExecuteContractCaller)
	return ret0
}

// SetGasPrice indicates an expected call of SetGasPrice
func (mr *MockExecuteContractCallerMockRecorder) SetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasPrice", reflect.TypeOf((*MockExecuteContractCaller)(nil).SetGasPrice), arg0)
}

// SetGasLimit mocks base method
func (m *MockExecuteContractCaller) SetGasLimit(arg0 uint64) ExecuteContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasLimit", arg0)
	ret0, _ := ret[0].(ExecuteContractCaller)
	return ret0
}

// SetGasLimit indicates an expected call of SetGasLimit
func (mr *MockExecuteContractCallerMockRecorder) SetGasLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockExecuteContractCaller)(nil).SetGasLimit), arg0)
}

// SetAmount mocks base method
func (m *MockExecuteContractCaller) SetAmount(arg0 *big.Int) ExecuteContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAmount", arg0)
	ret0, _ := ret[0].(ExecuteContractCaller)
	return ret0
}

// SetAmount indicates an expected call of SetAmount
func (mr *MockExecuteContractCallerMockRecorder) SetAmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAmount", reflect.TypeOf((*MockExecuteContractCaller)(nil).SetAmount), arg0)
}

// SetNonce mocks base method
func (m *MockExecuteContractCaller) SetNonce(arg0 uint64) ExecuteContractCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonce", arg0)
	ret0, _ := ret[0].(ExecuteContractCaller)
	return ret0
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockExecuteContractCallerMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockExecuteContractCaller)(nil).SetNonce), arg0)
}

// MockContract is a mock of Contract interface
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
}

// MockContractMockRecorder is the mock recorder for MockContract
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockContract) Read(method string, args ...interface{}) ReadContractCaller {
	m.ctrl.T.Helper()
	varargs := []interface{}{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(ReadContractCaller)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockContractMockRecorder) Read(method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockContract)(nil).Read), varargs...)
}

// Execute mocks base method
func (m *MockContract) Execute(method string, args ...interface{}) ExecuteContractCaller {
	m.ctrl.T.Helper()
	varargs := []interface{}{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(ExecuteContractCaller)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockContractMockRecorder) Execute(method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockContract)(nil).Execute), varargs...)
}

// MockReadOnlyContract is a mock of ReadOnlyContract interface
type MockReadOnlyContract struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyContractMockRecorder
}

// MockReadOnlyContractMockRecorder is the mock recorder for MockReadOnlyContract
type MockReadOnlyContractMockRecorder struct {
	mock *MockReadOnlyContract
}

// NewMockReadOnlyContract creates a new mock instance
func NewMockReadOnlyContract(ctrl *gomock.Controller) *MockReadOnlyContract {
	mock := &MockReadOnlyContract{ctrl: ctrl}
	mock.recorder = &MockReadOnlyContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadOnlyContract) EXPECT() *MockReadOnlyContractMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockReadOnlyContract) Read(method string, args ...interface{}) ReadContractCaller {
	m.ctrl.T.Helper()
	varargs := []interface{}{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(ReadContractCaller)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockReadOnlyContractMockRecorder) Read(method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadOnlyContract)(nil).Read), varargs...)
}

// MockStakingCaller is a mock of StakingCaller interface
type MockStakingCaller struct {
	ctrl     *gomock.Controller
	recorder *MockStakingCallerMockRecorder
}

// MockStakingCallerMockRecorder is the mock recorder for MockStakingCaller
type MockStakingCallerMockRecorder struct {
	mock *MockStakingCaller
}

// NewMockStakingCaller creates a new mock instance
func NewMockStakingCaller(ctrl *gomock.Controller) *MockStakingCaller {
	mock := &MockStakingCaller{ctrl: ctrl}
	mock.recorder = &MockStakingCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingCaller) EXPECT() *MockStakingCallerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStakingCaller) Create(candidateName string, amount *big.Int, duration uint32, autoStake bool) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", candidateName, amount, duration, autoStake)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStakingCallerMockRecorder) Create(candidateName, amount, duration, autoStake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStakingCaller)(nil).Create), candidateName, amount, duration, autoStake)
}

// Unstake mocks base method
func (m *MockStakingCaller) Unstake(bucketIndex uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstake", bucketIndex)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Unstake indicates an expected call of Unstake
func (mr *MockStakingCallerMockRecorder) Unstake(bucketIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstake", reflect.TypeOf((*MockStakingCaller)(nil).Unstake), bucketIndex)
}

// Withdraw mocks base method
func (m *MockStakingCaller) Withdraw(bucketIndex uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", bucketIndex)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockStakingCallerMockRecorder) Withdraw(bucketIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockStakingCaller)(nil).Withdraw), bucketIndex)
}

// AddDeposit mocks base method
func (m *MockStakingCaller) AddDeposit(index uint64, amount *big.Int) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeposit", index, amount)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// AddDeposit indicates an expected call of AddDeposit
func (mr *MockStakingCallerMockRecorder) AddDeposit(index, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeposit", reflect.TypeOf((*MockStakingCaller)(nil).AddDeposit), index, amount)
}

// ChangeCandidate mocks base method
func (m *MockStakingCaller) ChangeCandidate(candName string, bucketIndex uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCandidate", candName, bucketIndex)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// ChangeCandidate indicates an expected call of ChangeCandidate
func (mr *MockStakingCallerMockRecorder) ChangeCandidate(candName, bucketIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCandidate", reflect.TypeOf((*MockStakingCaller)(nil).ChangeCandidate), candName, bucketIndex)
}

// StakingTransfer mocks base method
func (m *MockStakingCaller) StakingTransfer(voterAddress address.Address, bucketIndex uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingTransfer", voterAddress, bucketIndex)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// StakingTransfer indicates an expected call of StakingTransfer
func (mr *MockStakingCallerMockRecorder) StakingTransfer(voterAddress, bucketIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingTransfer", reflect.TypeOf((*MockStakingCaller)(nil).StakingTransfer), voterAddress, bucketIndex)
}

// Restake mocks base method
func (m *MockStakingCaller) Restake(index uint64, duration uint32, autoStake bool) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restake", index, duration, autoStake)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Restake indicates an expected call of Restake
func (mr *MockStakingCallerMockRecorder) Restake(index, duration, autoStake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restake", reflect.TypeOf((*MockStakingCaller)(nil).Restake), index, duration, autoStake)
}

// MockCandidateCaller is a mock of CandidateCaller interface
type MockCandidateCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCandidateCallerMockRecorder
}

// MockCandidateCallerMockRecorder is the mock recorder for MockCandidateCaller
type MockCandidateCallerMockRecorder struct {
	mock *MockCandidateCaller
}

// NewMockCandidateCaller creates a new mock instance
func NewMockCandidateCaller(ctrl *gomock.Controller) *MockCandidateCaller {
	mock := &MockCandidateCaller{ctrl: ctrl}
	mock.recorder = &MockCandidateCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCandidateCaller) EXPECT() *MockCandidateCallerMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockCandidateCaller) Register(name, operatorAddr, rewardAddr address.Address, amount *big.Int, duration uint32, autoStake bool) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", name, operatorAddr, rewardAddr, amount, duration, autoStake)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockCandidateCallerMockRecorder) Register(name, operatorAddr, rewardAddr, amount, duration, autoStake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCandidateCaller)(nil).Register), name, operatorAddr, rewardAddr, amount, duration, autoStake)
}

// Update mocks base method
func (m *MockCandidateCaller) Update(name string, operatorAddr, rewardAddr address.Address) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", name, operatorAddr, rewardAddr)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCandidateCallerMockRecorder) Update(name, operatorAddr, rewardAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCandidateCaller)(nil).Update), name, operatorAddr, rewardAddr)
}

// MockStakingAPICaller is a mock of StakingAPICaller interface
type MockStakingAPICaller struct {
	ctrl     *gomock.Controller
	recorder *MockStakingAPICallerMockRecorder
}

// MockStakingAPICallerMockRecorder is the mock recorder for MockStakingAPICaller
type MockStakingAPICallerMockRecorder struct {
	mock *MockStakingAPICaller
}

// NewMockStakingAPICaller creates a new mock instance
func NewMockStakingAPICaller(ctrl *gomock.Controller) *MockStakingAPICaller {
	mock := &MockStakingAPICaller{ctrl: ctrl}
	mock.recorder = &MockStakingAPICallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingAPICaller) EXPECT() *MockStakingAPICallerMockRecorder {
	return m.recorder
}

// API mocks base method
func (m *MockStakingAPICaller) API() iotexapi.APIServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(iotexapi.APIServiceClient)
	return ret0
}

// API indicates an expected call of API
func (mr *MockStakingAPICallerMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockStakingAPICaller)(nil).API))
}

// Call mocks base method
func (m *MockStakingAPICaller) Call(ctx context.Context, opts ...grpc.CallOption) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockStakingAPICallerMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockStakingAPICaller)(nil).Call), varargs...)
}

// SetGasPrice mocks base method
func (m *MockStakingAPICaller) SetGasPrice(arg0 *big.Int) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasPrice", arg0)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// SetGasPrice indicates an expected call of SetGasPrice
func (mr *MockStakingAPICallerMockRecorder) SetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasPrice", reflect.TypeOf((*MockStakingAPICaller)(nil).SetGasPrice), arg0)
}

// SetGasLimit mocks base method
func (m *MockStakingAPICaller) SetGasLimit(arg0 uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGasLimit", arg0)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// SetGasLimit indicates an expected call of SetGasLimit
func (mr *MockStakingAPICallerMockRecorder) SetGasLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockStakingAPICaller)(nil).SetGasLimit), arg0)
}

// SetNonce mocks base method
func (m *MockStakingAPICaller) SetNonce(arg0 uint64) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonce", arg0)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockStakingAPICallerMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStakingAPICaller)(nil).SetNonce), arg0)
}

// SetPayload mocks base method
func (m *MockStakingAPICaller) SetPayload(arg0 []byte) StakingAPICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayload", arg0)
	ret0, _ := ret[0].(StakingAPICaller)
	return ret0
}

// SetPayload indicates an expected call of SetPayload
func (mr *MockStakingAPICallerMockRecorder) SetPayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockStakingAPICaller)(nil).SetPayload), arg0)
}
